install.packages("ggplot2")
install.packages("prettydoc")
library(prettydoc)
unlink('Desktop/Analysing historical voting of the United Nations General Assembly/UN General Assembly_cache', recursive = TRUE)
q()
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>% filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>% group_by(year) %>% summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>% filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>% group_by(year) %>% summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1))
+ geom_line() + xlim(years)
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
filteredVotes <- completeVotes %>%
filter(vote %in% c("1", "2", "3"))
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>%
filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>%
group_by(year) %>%
summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
byCountryYes <- filteredVotes %>%
group_by(Countryname) %>%
summarize(Votes = n(), PercentageofYes = mean(vote == 1) * 100)
head(byCountryYes %>% arrange(PercentageofYes))
head(byCountryYes %>% filter(Votes > 200) %>% arrange(desc(PercentageofYes)))
summarizedVotes <- filteredVotes %>% group_by(year, Countryname) %>% summarize(Votes = n(), PercentageofYes = mean(vote == 1) * 100)
Countries <- c("United States of America", "Norway", "India","Germany", "France", "China")
filteredCountry <- summarizedVotes %>% filter(Countryname %in% Countries)
ggplot(filteredCountry, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years) + facet_wrap(~Countryname, scales = "free_y") + theme(axis.text.x = element_text(face="bold", size=07, angle=45))
summary(overall_model)
overall_model <- lm(percent_yes ~ year, year_by_yearYes)
summary(overall_model)
View(year_by_yearYes)
overall_model <- lm(year_by_yearYes$PercentageofYes ~ year, year_by_yearYes)
summary(overall_model)
model_india <- lm(PercentageofYes ~ year, byCountryYes %>% filter(Countryname == "India"))
View(byCountryYes)
View(summarizedVotes)
model_india <- lm(PercentageofYes ~ year, summarizedVotes %>% filter(Countryname == "India"))
summary(overall_model)
model_india <- lm(PercentageofYes ~ year, summarizedVotes %>% filter(Countryname == "India"))
ggplot(filteredCountry, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years) + facet_wrap(~Countryname, scales = "free_y") + theme(axis.text.x = element_text(face="bold", size=07, angle=45))
View(filteredVotes)
View(completeVotes)
a <- c(1.2, 2, 3.5, 4)
b <- c(1.2, 2.2, 3.5, 4)
sum(a==b)
xvect <- c(1,2,3)
xvect
height <- c(25,18,40,45,35)
height(5)
height[length]
heighty(length(height))
setwd("~/Desktop/Polynomial Regression R")
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ ., data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Polynomial Regression results
library(ggplot2)
ggplot() + geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), colour = 'blue') +
xlab('Level') + ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))), colour = 'blue') +
xlab('Level') + ylab('Salary')
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
View(dataset)
View(dataset)
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ ., data = dataset)
# Visualising the Polynomial Regression results
library(ggplot2)
ggplot() + geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), colour = 'blue') +
xlab('Level') + ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))), colour = 'blue') +
xlab('Level') + ylab('Salary')
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
